name: Docker Build, Scan, and Test Endpoints

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'  # Activar workflow con tags tipo v1.0.0

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest .
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.ref_name }}
          fi

      - name: Install Trivy and Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Push to Docker Hub
        if: success()
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.ref_name }}
          fi

  test-endpoints:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Run Docker image for Read service (GET /hola)
        run: |
          docker run -d -p 8082:8080 --name hola-golang ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest
          sleep 15

      - name: Test Read endpoint (GET /hola)
        run: |
          curl --fail http://localhost:8082/hola || exit 1

      - name: Set up Docker Compose and run all services
        run: |
          docker-compose -f ./docker-compose.yaml up -d
          sleep 15

      - name: Test Create endpoint (POST /create)
        run: |
          curl -X POST http://localhost:8080/create \
            -H "Content-Type: application/json" \
            -d '{"nombre":"Test","telefono":"123","direccion":"Test","cedula":"999","correo":"test@correo.com"}' \
            || exit 1

  unit-tests:
    needs: test-endpoints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Test create-service
        working-directory: ./create
        run: go test ./controllers -v --cover

  release:
    needs: unit-tests
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ðŸš€ Nuevo release automÃ¡tico generado por CI/CD
            - Imagen Docker: `${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.ref_name }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push-to-ghcr:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image for GHCR
        run: |
          docker build -t ghcr.io/${{ github.repository }}/my-app:latest .
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            docker tag ghcr.io/${{ github.repository }}/my-app:latest ghcr.io/${{ github.repository }}/my-app:${{ github.ref_name }}
          fi

      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}/my-app:latest
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            docker push ghcr.io/${{ github.repository }}/my-app:${{ github.ref_name }}
          fi
